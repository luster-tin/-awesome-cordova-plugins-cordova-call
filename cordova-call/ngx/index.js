import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import * as i0 from "@angular/core";
var CordovaCall = /** @class */ (function (_super) {
    __extends(CordovaCall, _super);
    function CordovaCall() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CordovaCall.prototype.receiveCall = function (from, id, success, error) { return cordova(this, "receiveCall", {}, arguments); };
    CordovaCall.prototype.sendCall = function (to, id, success, error) { return cordova(this, "sendCall", {}, arguments); };
    CordovaCall.prototype.connectCall = function (success, error) { return cordova(this, "connectCall", {}, arguments); };
    CordovaCall.prototype.endCall = function (success, error) { return cordova(this, "endCall", {}, arguments); };
    CordovaCall.prototype.mute = function (success, error) { return cordova(this, "mute", {}, arguments); };
    CordovaCall.prototype.unmute = function (success, error) { return cordova(this, "unmute", {}, arguments); };
    CordovaCall.prototype.speakerOn = function (success, error) { return cordova(this, "speakerOn", {}, arguments); };
    CordovaCall.prototype.speakerOff = function (success, error) { return cordova(this, "speakerOff", {}, arguments); };
    CordovaCall.prototype.setAppName = function (appName, success, error) { return cordova(this, "setAppName", {}, arguments); };
    CordovaCall.prototype.setIcon = function (iconName, success, error) { return cordova(this, "setIcon", {}, arguments); };
    CordovaCall.prototype.setVideo = function (value, success, error) { return cordova(this, "setVideo", {}, arguments); };
    CordovaCall.prototype.setRingtone = function (ringtoneName, success, error) { return cordova(this, "setRingtone", {}, arguments); };
    CordovaCall.prototype.setIncludeInRecents = function (value, success, error) { return cordova(this, "setIncludeInRecents", {}, arguments); };
    CordovaCall.prototype.on = function (event, handler) { return cordova(this, "on", {}, arguments); };
    CordovaCall.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CordovaCall, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    CordovaCall.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CordovaCall });
    CordovaCall.pluginName = "CordovaCall";
    CordovaCall.plugin = "cordova-call";
    CordovaCall.pluginRef = "cordova.call";
    CordovaCall.repo = "https://github.com/WebsiteBeaver/CordovaCall";
    CordovaCall.install = "";
    CordovaCall.installVariables = [];
    CordovaCall.platforms = ["Android", "iOS"];
    CordovaCall = __decorate([], CordovaCall);
    return CordovaCall;
}(AwesomeCordovaNativePlugin));
export { CordovaCall };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CordovaCall, decorators: [{
            type: Injectable
        }], propDecorators: { receiveCall: [], sendCall: [], connectCall: [], endCall: [], mute: [], unmute: [], speakerOn: [], speakerOff: [], setAppName: [], setIcon: [], setVideo: [], setRingtone: [], setIncludeInRecents: [], on: [] } });
//# sourceMappingURL=data:application/json;base64,