var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var CordovaCallOriginal = /** @class */ (function (_super) {
    __extends(CordovaCallOriginal, _super);
    function CordovaCallOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CordovaCallOriginal.prototype.receiveCall = function (from, id, success, error) { return cordova(this, "receiveCall", {}, arguments); };
    CordovaCallOriginal.prototype.sendCall = function (to, id, success, error) { return cordova(this, "sendCall", {}, arguments); };
    CordovaCallOriginal.prototype.connectCall = function (success, error) { return cordova(this, "connectCall", {}, arguments); };
    CordovaCallOriginal.prototype.endCall = function (success, error) { return cordova(this, "endCall", {}, arguments); };
    CordovaCallOriginal.prototype.mute = function (success, error) { return cordova(this, "mute", {}, arguments); };
    CordovaCallOriginal.prototype.unmute = function (success, error) { return cordova(this, "unmute", {}, arguments); };
    CordovaCallOriginal.prototype.speakerOn = function (success, error) { return cordova(this, "speakerOn", {}, arguments); };
    CordovaCallOriginal.prototype.speakerOff = function (success, error) { return cordova(this, "speakerOff", {}, arguments); };
    CordovaCallOriginal.prototype.setAppName = function (appName, success, error) { return cordova(this, "setAppName", {}, arguments); };
    CordovaCallOriginal.prototype.setIcon = function (iconName, success, error) { return cordova(this, "setIcon", {}, arguments); };
    CordovaCallOriginal.prototype.setVideo = function (value, success, error) { return cordova(this, "setVideo", {}, arguments); };
    CordovaCallOriginal.prototype.setRingtone = function (ringtoneName, success, error) { return cordova(this, "setRingtone", {}, arguments); };
    CordovaCallOriginal.prototype.setIncludeInRecents = function (value, success, error) { return cordova(this, "setIncludeInRecents", {}, arguments); };
    CordovaCallOriginal.prototype.on = function (event, handler) { return cordova(this, "on", {}, arguments); };
    CordovaCallOriginal.pluginName = "CordovaCall";
    CordovaCallOriginal.plugin = "cordova-call";
    CordovaCallOriginal.pluginRef = "cordova.call";
    CordovaCallOriginal.repo = "https://github.com/WebsiteBeaver/CordovaCall";
    CordovaCallOriginal.install = "";
    CordovaCallOriginal.installVariables = [];
    CordovaCallOriginal.platforms = ["Android", "iOS"];
    return CordovaCallOriginal;
}(AwesomeCordovaNativePlugin));
var CordovaCall = new CordovaCallOriginal();
export { CordovaCall };
//# sourceMappingURL=data:application/json;base64,